''' https://leetcode.com/problems/number-of-islands/
    Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), 
    return the number of islands.

    An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
    You may assume all four edges of the grid are all surrounded by water.'''

class Solution:
    def numIslands(self, grid: list[list[str]]) -> int:
        rows = len(grid)
        cols = len(grid[0])
        queue = []
        num_of_islands = 0
        outer_row = 0
        outer_col = 0
        while outer_row < rows:
            while outer_col < cols:

                if grid[outer_row][outer_col] == '1':
                    queue.append((outer_row, outer_col))
                    grid[outer_row][outer_col] = 0
                    num_of_islands += 1
                    while queue:
                        row, col = queue.pop(0)
                        if row - 1 >= 0 and grid[row - 1][col] == '1':
                            queue.append((row - 1, col))
                            grid[row - 1][col] = 0
                        if col - 1 >= 0 and grid[row][col - 1] == '1':
                            queue.append((row, col - 1))
                            grid[row][col - 1] = 0
                        if row + 1 < rows and grid[row + 1][col] == '1':
                            queue.append((row + 1, col))
                            grid[row + 1][col] = 0
                        if col + 1 < cols and grid[row][col + 1] == '1':
                            queue.append((row, col + 1))
                            grid[row][col + 1] = 0
                

                outer_col += 1
            outer_col = 0
            outer_row += 1
        return num_of_islands
def main():
    sol = Solution()
    print(sol.numIslands([
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]))
    print(sol.numIslands([
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]))
    print(sol.numIslands([["0","1","0"],["1","0","1"],["0","1","0"]]))
    print(sol.numIslands([["1","1","1"],["0","1","0"],["1","1","1"]]))
    print(sol.numIslands([["1","0","0","1","1","1","0","1","1","0","0","0","0","0","0","0","0","0","0","0"],["1","0","0","1","1","0","0","1","0","0","0","1","0","1","0","1","0","0","1","0"],["0","0","0","1","1","1","1","0","1","0","1","1","0","0","0","0","1","0","1","0"],["0","0","0","1","1","0","0","1","0","0","0","1","1","1","0","0","1","0","0","1"],["0","0","0","0","0","0","0","1","1","1","0","0","0","0","0","0","0","0","0","0"],["1","0","0","0","0","1","0","1","0","1","1","0","0","0","0","0","0","1","0","1"],["0","0","0","1","0","0","0","1","0","1","0","1","0","1","0","1","0","1","0","1"],["0","0","0","1","0","1","0","0","1","1","0","1","0","1","1","0","1","1","1","0"],["0","0","0","0","1","0","0","1","1","0","0","0","0","1","0","0","0","1","0","1"],["0","0","1","0","0","1","0","0","0","0","0","1","0","0","1","0","0","0","1","0"],["1","0","0","1","0","0","0","0","0","0","0","1","0","0","1","0","1","0","1","0"],["0","1","0","0","0","1","0","1","0","1","1","0","1","1","1","0","1","1","0","0"],["1","1","0","1","0","0","0","0","1","0","0","0","0","0","0","1","0","0","0","1"],["0","1","0","0","1","1","1","0","0","0","1","1","1","1","1","0","1","0","0","0"],["0","0","1","1","1","0","0","0","1","1","0","0","0","1","0","1","0","0","0","0"],["1","0","0","1","0","1","0","0","0","0","1","0","0","0","1","0","1","0","1","1"],["1","0","1","0","0","0","0","0","0","1","0","0","0","1","0","1","0","0","0","0"],["0","1","1","0","0","0","1","1","1","0","1","0","1","0","1","1","1","1","0","0"],["0","1","0","0","0","0","1","1","0","0","1","0","1","0","0","1","0","0","1","1"],["0","0","0","0","0","0","1","1","1","1","0","1","0","0","0","1","1","0","0","0"]]))
if __name__ == '__main__':
    main()